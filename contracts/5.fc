{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

tuple empty_tuple() asm "NIL";
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";

() recv_internal() {
}

(tuple) fibonacci (int n) impure {
  tuple fib_sequence = to_tuple([0, 1]);

  int i = 2;
  while (i < n) {
    int next_num = fib_sequence.at(i - 1) + fib_sequence.at(i - 2);
    fib_sequence~tpush(next_num);
    i = i + 1;
  }
  return fib_sequence;
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  if ((n + k) <= 0) {
    return empty_tuple();
  }
  if ((n + k) == 1) {
    return to_tuple([1]);
  }
  if ((n + k) == 2){
    return to_tuple([1, 1]);
  } else {
    tuple sequence = fibonacci( n + k);
    tuple result = empty_tuple();
    int i = n;
    int count = 0;
    while (count < k){
      result~tpush(sequence.at(i));
      i = i + 1;
      count = count + 1;
    }
    return result;
  }
}
