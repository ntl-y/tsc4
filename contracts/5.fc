{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

tuple empty_tuple() asm "NIL";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  if (n < 0) | (k < 0) | (n + k > 371) | (n > 371) | (k > 255) {
    return empty_tuple();
  }

  tuple sequence = empty_tuple();
  (int f0 = 0, int f1 = 1, int count = 0, int n+k = n + k);
  if (n+k > 368) {n+k = 369;}

  while(count < n+k){
    if (count >= n){
      sequence~tpush(f0);
    }
    int next_num = f0 + f1;
    f0 = f1;
    f1 = next_num;
    count = count + 1;
  }

  if (count >= n) {
    if (count == 369) {sequence~tpush(58472848379039952684853851736901133239741266891456844557261755914039063645794);}
    count += 1;
    if (count == 370) {sequence~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);}
  }
  return sequence;
}
