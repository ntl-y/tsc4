{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

int slice_bits(slice s) asm "SBITS";

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice slice_text = text.begin_parse();

  int flag = slice_text~load_uint(32);
  builder result = begin_cell().store_uint(flag, 32);

  int i = 0;
  while (i < (slice_text.slice_bits() / 8)){
    int char = slice_text~load_uint(8);
    if ( ( 65 <= char ) & ( char <= 90) ) {
      result = result.store_uint( ( char - 65 + shift) % 26 + 65, 8);
    } 
    if ( ( 97 <= char ) & ( char <= 122) ) {
      result = result.store_uint( ( char - 97 + shift) % 26 + 97, 8);
    }
    i = i + 1;
  }
  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice slice_text = text.begin_parse();

  int flag = slice_text~load_uint(32);
  builder result = begin_cell().store_uint(flag, 32);

  int i = 0;
  while (i < (slice_text.slice_bits() / 8)){
    int char = slice_text~load_uint(8);
    if ( ( 65 <= char ) & ( char <= 90) ) {
      result = result.store_uint((( char - 91 - shift) % 26 ) + 65, 8);
    } 
    if ( ( 97 <= char ) & ( char <= 122) ) {
      result = result.store_uint((( char - 123 - shift) % 26 ) + 97, 8);
    }
    i = i + 1;
  }
  return result.end_cell();
}

